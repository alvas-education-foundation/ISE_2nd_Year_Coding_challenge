/* 1. Program to replace all 0's with 1 in a given integer is discussed here. Given an integer as an input, all the 0's in the number has to be replaced with 1.*/

#include<stdio.h>
int replace(long int number)
{
    if (number == 0)
        return 0;
    int dig = number % 10;
    if (dig == 0)
        dig = 1;
    return replace(number/10) * 10 + dig;
}

int Convert(long int number)
{
    if (number == 0)
        return 1;
    else
        return replace(number);
}

int main()
{
    long int number;
    printf("\nEnter the Number : ");
    scanf("%d", &number);
    printf("\nNumber after replacement : %d", Convert(number));
    return 0;
}

// 2. Hollow diamond pattern printing using stars

#include <stdio.h>
int main()
{
    int i, j, space, k = 0, n;
    printf("\nEnter the number of rows : ");
    scanf("%d",&n);
    for (i = 1; i <= n; i++)
    {
        for (j = 1; j <= n -i; j++)
        {
            printf( " ");
        }
        while (k != (2 * i - 1))
        {
            if (k == 0 || k == 2 * i - 2)
                printf("*");
            else
                printf( " ");
            k++;
        }
        k = 0;
        printf("\n");
    }
    n--;
    for (i = n; i >= 1; i--)
    {
        for (j = 0; j <= n-i; j++)
        {
            printf(" ");
        }
        k = 0;
        while (k != (2 * i- 1))
        {
            if (k == 0 || k == 2 * i - 2)
                printf("*");
            else
                printf(" ");
            k++;
        }	
        printf("\n");	
    }
}

/* 3. Rotate the matrix by K times means rotating the given N*N matrix to the specified (K) number of times*/

     public class Rotate {

		    static final int M=3; 
		    static final int N=3; 
		    static void rotateMatrix(int matrix[][], int k)
		    {
		        int temp[]=new int[M]; 
		        k = k % M; 
		      for (int i = 0; i < N; i++) 
		    {
		            for (int t = 0; t < M - k; t++) 
		            temp[t] = matrix[i][t]; 
		            for (int j = M - k; j < M; j++) 
		            matrix[i][j - M + k] = matrix[i][j]; 
		            for (int j = k; j < M; j++) 
		            matrix[i][j] = temp[j - k]; 
		        } 
		    } 
		      
		    
		     static void displayMatrix(int matrix[][]) 
		    { 
		        for (int i = 0; i < N; i++) 
		        { 
		            for (int j = 0; j < M; j++) 
		            System.out.print(matrix[i][j] + " "); 
		            System.out.println(); 
		        } 
		    }  
		      
		  
		    public static void main (String[] args) 
		    { 
		        int matrix[][] = {{10, 20, 30}, 
		                        {40, 50, 60},  
		                        {70, 80, 90}}; 
		    int k = 2; 
		    rotateMatrix(matrix, k); 
		    displayMatrix(matrix); 
		    } 
		

	}






